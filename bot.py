# bot.py

import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    CallbackQueryHandler,
)
from dotenv import load_dotenv
import os
import requests
from database import create_database, populate_database, get_plant, get_seasonal_tips

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
create_database()
populate_database()  # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    keyboard = [
        ["üå± –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üõ† –ü–æ–º–æ—â—å"],
        ["üå¶ –ü–æ–≥–æ–¥–∞", "üêõ –í—Ä–µ–¥–∏—Ç–µ–ª–∏"],
        ["üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"],
    ]
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤ –∏ —Å–∞–¥–æ–≤–æ–¥–æ–≤.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/weather [–≥–æ—Ä–æ–¥] - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async def get_weather(update: Update, context: CallbackContext):
    if not WEATHER_API_KEY:
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞"
        )
        return

    city = " ".join(context.args)
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        
        if response.status_code != 200:
            await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        data = response.json()
        weather = data["weather"][0]["description"]
        temp = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        wind = data["wind"]["speed"]

        advice = ""
        if temp < 5:
            advice = "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ! –£–∫—Ä–æ–π—Ç–µ —Ç–µ–ø–ª–æ–ª—é–±–∏–≤—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è."
        elif temp > 30:
            advice = "‚òÄÔ∏è –ñ–∞—Ä–∫–æ! –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ–ª–∏–≤."

        message = (
            f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather}\n"
            f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
            f"\n{advice}"
        )

        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text.lower()

    if text == "–ø–æ–º–æ—â—å" or text == "üõ† –ø–æ–º–æ—â—å":
        await show_help(update)
    elif text == "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" or text == "üå± —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
        await show_plant_options(update)
    elif text == "–≤—Ä–µ–¥–∏—Ç–µ–ª–∏" or text == "üêõ –≤—Ä–µ–¥–∏—Ç–µ–ª–∏":
        await show_pests_menu(update)
    elif text == "–∫–∞–ª–µ–Ω–¥–∞—Ä—å" or text == "üìÖ –∫–∞–ª–µ–Ω–¥–∞—Ä—å":
        await show_seasonal_tips(update)
    elif text == "–ø–æ–≥–æ–¥–∞" or text == "üå¶ –ø–æ–≥–æ–¥–∞":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /weather [–≥–æ—Ä–æ–¥]. –ù–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞"
        )
    elif text in ["–µ—Å–ª—å", "–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞", "–∞–∫–∞—Ü–∏—è", "–±–æ—è—Ä—ã—à–Ω–∏–∫", "–±—É–∑–∏–Ω–∞", "–≥–µ—Ä–∞–Ω—å", "—Ñ–ª–æ–∫—Å", "–∏—Ä–∏—Å", "–ø–∏–æ–Ω", "–ª–∏–ª–µ–π–Ω–∏–∫", "–ø–µ—Ç—É–Ω–∏—è", "–≥–µ–æ—Ä–≥–∏–Ω", "–∏–ø–æ–º–µ—è", "—è–±–ª–æ–Ω—è", "–≥—Ä—É—à–∞", "–∫–ª–µ–º–∞—Ç–∏—Å", "–≥–∞—Ü–∞–Ω–∏—è"]:  
        plant = get_plant(text)
        if plant and len(plant) == 5:
            await show_plant_info(update, plant)
        else:
            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –Ω–µ–ø–æ–ª–Ω–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ –º–µ–Ω—é."
        )

async def show_help(update: Update):
    help_text = (
        "üõ† *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏:*\n\n"
        "üå± *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏* - –°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏\n"
        "üå¶ *–ü–æ–≥–æ–¥–∞* - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞\n"
        "üêõ *–í—Ä–µ–¥–∏—Ç–µ–ª–∏* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–¥–∏—Ç–µ–ª—è—Ö –∏ –±–æ—Ä—å–±–µ —Å –Ω–∏–º–∏\n"
        "üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å* - –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Å–∞–¥–æ–≤–æ–¥–æ–≤\n\n"
    )
    await update.message.reply_text(help_text)

async def show_plant_options(update: Update, page=0):
    all_plants = [
        ("–ï–ª—å", "plant_–µ–ª—å"),
        ("–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞", "plant_–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞"),
        ("–ê–∫–∞—Ü–∏—è", "plant_–∞–∫–∞—Ü–∏—è"),
        ("–ë–æ—è—Ä—ã—à–Ω–∏–∫", "plant_–±–æ—è—Ä—ã—à–Ω–∏–∫"),
        ("–ë—É–∑–∏–Ω–∞", "plant_–±—É–∑–∏–Ω–∞"),
        ("–ì–µ—Ä–∞–Ω—å", "plant_–≥–µ—Ä–∞–Ω—å"),
        ("–§–ª–æ–∫—Å", "plant_—Ñ–ª–æ–∫—Å"),
        ("–ò—Ä–∏—Å", "plant_–∏—Ä–∏—Å"),
        ("–ü–∏–æ–Ω", "plant_–ø–∏–æ–Ω"),
        ("–õ–∏–ª–µ–π–Ω–∏–∫", "plant_–ª–∏–ª–µ–π–Ω–∏–∫"),
        ("–ü–µ—Ç—É–Ω–∏—è", "plant_–ø–µ—Ç—É–Ω–∏—è"),
        ("–ì–µ–æ—Ä–≥–∏–Ω", "plant_–≥–µ–æ—Ä–≥–∏–Ω"),
        ("–ò–ø–æ–º–µ—è", "plant_–∏–ø–æ–º–µ—è"),
        ("–Ø–±–ª–æ–Ω—è", "plant_—è–±–ª–æ–Ω—è"),
        ("–ì—Ä—É—à–∞", "plant_–≥—Ä—É—à–∞"),
        ("–ö–ª–µ–º–∞—Ç–∏—Å", "plant_–∫–ª–µ–º–∞—Ç–∏—Å"),
        ("–ì–∞—Ü–∞–Ω–∏—è", "plant_–≥–∞—Ü–∞–Ω–∏—è"),
    ]
    
    plants_per_page = 5
    pages = [all_plants[i:i + plants_per_page] for i in range(0, len(all_plants), plants_per_page)]
    total_pages = len(pages)
    current_page = pages[page] if page < total_pages else pages[-1]
    
    keyboard = [
        [InlineKeyboardButton(name, callback_data=callback)] 
        for name, callback in current_page
    ]
    
    if total_pages > 1:
        navigation_buttons = []
        for i in range(total_pages):
            if i == page:
                navigation_buttons.append(InlineKeyboardButton(f"¬∑ {i+1} ¬∑", callback_data=f"plant_page_{i}"))
            else:
                navigation_buttons.append(InlineKeyboardButton(str(i+1), callback_data=f"plant_page_{i}"))
        keyboard.append(navigation_buttons)
    
    text = f"üåø –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∞–¥–æ–≤–æ–π –∫—É–ª—å—Ç—É—Ä–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}). –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ:"
    
    if isinstance(update, Update) and update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data

        if data.startswith("plant_page_"):
            page = int(data.split("_")[2])
            await show_plant_options(update, page)
        
        elif data.startswith("plant_"):
            plant_name = data.split("_")[1]
            plant_data = get_plant(plant_name)
            if plant_data:
                name, description, care, pests, diseases = plant_data
                message = (
                    f"üå± *{name.capitalize()}*\n\n"
                    f"{description}\n\n"
                    f"*–£—Ö–æ–¥:*\n{care}\n\n"
                    f"*–û—Å–Ω–æ–≤–Ω—ã–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–∏:* {pests}\n"
                    f"*–ë–æ–ª–µ–∑–Ω–∏:* {diseases}"
                )
                await query.message.reply_text(message)
            else:
                await query.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        elif data.startswith("pest_"):
            pest = data.split("_")[1]
            tips = {
                "–¢–ª—è": "‚Ä¢ –û–ø—Ä—ã—Å–∫–∏–≤–∞–π—Ç–µ –º—ã–ª—å–Ω—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º —Å –∑–æ–ª–æ–π\n‚Ä¢ –ü—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –±–æ–∂—å–∏—Ö –∫–æ—Ä–æ–≤–æ–∫\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –§–∏—Ç–æ–≤–µ—Ä–º",
                "–ü–∞—É—Ç–∏–Ω–Ω—ã–π –∫–ª–µ—â": "‚Ä¢ –û–ø—Ä—ã—Å–∫–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥–æ–π\n‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∞–∫–∞—Ä–∏—Ü–∏–¥—ã (–ê–∫—Ç–∞—Ä–∞, –§–∏—Ç–æ–≤–µ—Ä–º)\n‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å",
                "–ë–µ–ª–æ–∫—Ä—ã–ª–∫–∞": "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∂–µ–ª—Ç—ã–µ –∫–ª–µ–µ–≤—ã–µ –ª–æ–≤—É—à–∫–∏\n‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥—ã (–ê–∫—Ç–∞—Ä–∞)\n‚Ä¢ –£–¥–∞–ª—è–π—Ç–µ –ø–æ—Ä–∞–∂–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—å—è",
                "–ö–æ–ª–æ—Ä–∞–¥—Å–∫–∏–π –∂—É–∫": "‚Ä¢ –°–æ–±–∏—Ä–∞–π—Ç–µ –∂—É–∫–æ–≤ –≤—Ä—É—á–Ω—É—é\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã (–ö–æ—Ä–∞–¥–æ, –ê–∫—Ç–∞—Ä–∞)\n‚Ä¢ –°–∞–∂–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è-—Ä–µ–ø–µ–ª–ª–µ–Ω—Ç—ã",
            }
            await query.message.reply_text(f"üêõ *–ë–æ—Ä—å–±–∞ —Å {pest}:*\n\n{tips.get(pest, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
        
        elif data.startswith("season_"):
            season = data.split("_")[1]
            tips = get_seasonal_tips(season)
            if tips:
                await query.message.reply_text(f"üìÖ *–°–æ–≤–µ—Ç—ã –Ω–∞ {season}—É:*\n\n{tips[0]}")
            else:
                await query.message.reply_text("–°–æ–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}", exc_info=True)
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def show_plant_info(update: Update, plant):
    if plant is None:
        await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    try:
        name, description, care, pests, diseases = plant
        message = f"üå± *{name.capitalize()}*\n\n{description}\n\n*–£—Ö–æ–¥:*\n{care}\n\n*–û—Å–Ω–æ–≤–Ω—ã–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–∏:* {pests}\n*–ë–æ–ª–µ–∑–Ω–∏:* {diseases}"
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏.")

async def show_pests_menu(update: Update):
    keyboard = [
        [InlineKeyboardButton("–¢–ª—è", callback_data="pest_–¢–ª—è")],
        [InlineKeyboardButton("–ü–∞—É—Ç–∏–Ω–Ω—ã–π –∫–ª–µ—â", callback_data="pest_–ü–∞—É—Ç–∏–Ω–Ω—ã–π –∫–ª–µ—â")],
        [InlineKeyboardButton("–ë–µ–ª–æ–∫—Ä—ã–ª–∫–∞", callback_data="pest_–ë–µ–ª–æ–∫—Ä—ã–ª–∫–∞")],
        [InlineKeyboardButton("–ö–æ–ª–æ—Ä–∞–¥—Å–∫–∏–π –∂—É–∫", callback_data="pest_–ö–æ–ª–æ—Ä–∞–¥—Å–∫–∏–π –∂—É–∫")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–¥–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

async def show_seasonal_tips(update: Update):
    keyboard = [
        [InlineKeyboardButton("–í–µ—Å–Ω–∞", callback_data="season_–≤–µ—Å–Ω–∞")],
        [InlineKeyboardButton("–õ–µ—Ç–æ", callback_data="season_–ª–µ—Ç–æ")],
        [InlineKeyboardButton("–û—Å–µ–Ω—å", callback_data="season_–æ—Å–µ–Ω—å")],
        [InlineKeyboardButton("–ó–∏–º–∞", callback_data="season_–∑–∏–º–∞")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data

        if data.startswith("plant_page_"):
            page = int(data.split("_")[2])
            await show_plant_options(update, page)
        
        elif data.startswith("plant_"):
            plant_name = data.split("_")[1]
            plant_data = get_plant(plant_name)
            if plant_data:
                name, description, care, pests, diseases = plant_data
                message = (
                    f"üå± *{name.capitalize()}*\n\n"
                    f"{description}\n\n"
                    f"*–£—Ö–æ–¥:*\n{care}\n\n"
                    f"*–û—Å–Ω–æ–≤–Ω—ã–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–∏:* {pests}\n"
                    f"*–ë–æ–ª–µ–∑–Ω–∏:* {diseases}"
                )
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                await query.edit_message_text(
                    text=message,
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
            else:
                await query.edit_message_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        elif data.startswith("pest_"):
            pest = data.split("_")[1]
            tips = {
                "–¢–ª—è": "‚Ä¢ –û–ø—Ä—ã—Å–∫–∏–≤–∞–π—Ç–µ –º—ã–ª—å–Ω—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º —Å –∑–æ–ª–æ–π\n‚Ä¢ –ü—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –±–æ–∂—å–∏—Ö –∫–æ—Ä–æ–≤–æ–∫\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –§–∏—Ç–æ–≤–µ—Ä–º",
                "–ü–∞—É—Ç–∏–Ω–Ω—ã–π –∫–ª–µ—â": "‚Ä¢ –û–ø—Ä—ã—Å–∫–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥–æ–π\n‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∞–∫–∞—Ä–∏—Ü–∏–¥—ã (–ê–∫—Ç–∞—Ä–∞, –§–∏—Ç–æ–≤–µ—Ä–º)\n‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å",
                "–ë–µ–ª–æ–∫—Ä—ã–ª–∫–∞": "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∂–µ–ª—Ç—ã–µ –∫–ª–µ–µ–≤—ã–µ –ª–æ–≤—É—à–∫–∏\n‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥—ã (–ê–∫—Ç–∞—Ä–∞)\n‚Ä¢ –£–¥–∞–ª—è–π—Ç–µ –ø–æ—Ä–∞–∂–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—å—è",
                "–ö–æ–ª–æ—Ä–∞–¥—Å–∫–∏–π –∂—É–∫": "‚Ä¢ –°–æ–±–∏—Ä–∞–π—Ç–µ –∂—É–∫–æ–≤ –≤—Ä—É—á–Ω—É—é\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã (–ö–æ—Ä–∞–¥–æ, –ê–∫—Ç–∞—Ä–∞)\n‚Ä¢ –°–∞–∂–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è-—Ä–µ–ø–µ–ª–ª–µ–Ω—Ç—ã",
            }
            await query.edit_message_text(
                text=f"üêõ *–ë–æ—Ä—å–±–∞ —Å {pest}:*\n\n{tips.get(pest, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}",
                reply_markup=None
            )
        
        elif data.startswith("season_"):
            season = data.split("_")[1]
            tips = get_seasonal_tips(season)
            if tips:
                await query.edit_message_text(
                    text=f"üìÖ *–°–æ–≤–µ—Ç—ã –Ω–∞ {season}—É:*\n\n{tips[0]}",
                    reply_markup=None
                )
            else:
                await query.edit_message_text("–°–æ–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫  
async def error_handler(update: Update, context: CallbackContext) -> None:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}")
    if update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", show_help))
    application.add_handler(CommandHandler("weather", get_weather))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
